#include "include/hex_util.hpp"
#include <gtest/gtest.h>

// NOLINTNEXTLINE
TEST(TextHexUtil, CorrectlyEncodesBytesToString) {
  const std::vector<uint8_t> bytes({
      0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xA,  0xB,
      0xC,  0xD,  0xE,  0xF,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
      0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
  });

  const auto encoded_string = hex_util::encode(bytes);

  std::string expected_string =
      "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f";

  EXPECT_EQ(expected_string, encoded_string);
}

// NOLINTNEXTLINE
TEST(TextHexUtil, CorrectlyDecodesStringToBytes) {
  std::string encoded_string =
      "0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f";

  const std::vector<uint8_t> expected_bytes({
      0x1,  0x2,  0x3,  0x4,  0x5,  0x6,  0x7,  0x8,  0x9,  0xA,  0xB,
      0xC,  0xD,  0xE,  0xF,  0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
      0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
  });

  const auto decoded_bytes = hex_util::decode(encoded_string);

  EXPECT_EQ(expected_bytes, decoded_bytes);
}
